{
	"info": {
		"_postman_id": "bbd9288b-0935-4f2e-a6d4-ab3c3cab6022",
		"name": "Jira_Project_Augbatch",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26384986",
		"_collection_link": "https://planetary-shadow-394234.postman.co/workspace/TCS-HealthCare~9f4326fe-093d-433b-8e37-df0b4da9144d/collection/26384986-bbd9288b-0935-4f2e-a6d4-ab3c3cab6022?action=share&source=collection_link&creator=26384986"
	},
	"item": [
		{
			"name": "Project_API",
			"item": [
				{
					"name": "GetAllProjects",
					"item": [
						{
							"name": "Validating all the Projects which are visible for the currently logged in user.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"//console.log(responseBody)\r",
											"//console.log(pm.response.text())\r",
											"//console.log(pm.response.json())\r",
											"*/\r",
											"var respObj =(pm.response.json())\r",
											"console.log(respObj) // json array\r",
											"console.log(respObj.count())\r",
											"console.log(respObj[0].expand)\r",
											"\r",
											"//  pm.test(\"Verify response\", function()\r",
											"//  {\r",
											"//     var respObj =(pm.response.json())\r",
											"//     var i = 0\r",
											"//     while( i < respObj.count()){\r",
											"//      //   console.log(\"hi\")\r",
											"//       console.log(respObj[i].expand)\r",
											"//       console.log(respObj[i].self)\r",
											"//       console.log(respObj[i].id)\r",
											"//       console.log(respObj[i].key)\r",
											"//       console.log(respObj[i].name)\r",
											"//       console.log(respObj[i].avatarUrls)\r",
											"//      // console.log(respObj[i].avatarUrls.48x48)\r",
											"//       i = i+1\r",
											"//     }\r",
											"//   console.log(\"Pass\")\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"\r",
											"// pm.test(\"X-Arequestid is present\", function () {\r",
											"//     pm.response.to.have.header(\"X-Arequestid\");\r",
											"//     pm.expect(pm.response.headers.get(\"X-Arequestid\")).to.be.eql(\"484b5df4863480a98c0ee87edbbbf81d\")\r",
											"// });\r",
											"\r",
											" pm.test(\"Verify response\", function()\r",
											" {\r",
											"     var respObj =(pm.response.json())\r",
											"if(respObj.count()>0){\r",
											"    for(var i =0; i < respObj.count(); i = i+1)\r",
											"    {\r",
											"      pm.expect(respObj[i].expand).to.be.not.null\r",
											"      pm.expect(respObj[i].expand).to.be.not.empty\r",
											"      pm.expect(respObj[i].expand).to.be.eql(\"description,lead,issueTypes,url,projectKeys,permissions,insight\")\r",
											"      pm.expect(respObj[i].self).to.be.not.null\r",
											"      pm.expect(respObj[i].self).to.be.not.empty\r",
											"      pm.expect(respObj[i].self).to.be.contains(\"https://febbatchjirademo1.atlassian.net/rest/api/2/project\")\r",
											"      pm.expect(respObj[i].self).to.be.contains(respObj[i].id)\r",
											"      pm.expect(respObj[i].id).to.be.not.null\r",
											"      pm.expect(respObj[i].id).to.be.not.empty\r",
											"      pm.expect(respObj[i].key).to.be.not.null\r",
											"      pm.expect(respObj[i].key).to.be.not.empty\r",
											"      pm.expect(respObj[i].name).to.be.not.null\r",
											"      pm.expect(respObj[i].name).to.be.not.empty\r",
											"    // pm.expect(respObj[i].avatarUrls).to.be.contains(\"48x48\")\r",
											"      pm.expect(respObj[i].projectTypeKey).to.be.not.null\r",
											"      pm.expect(respObj[i].projectTypeKey).to.be.not.empty\r",
											"      pm.expect(respObj[i].projectTypeKey).to.be.oneOf([\"software\", \"business\"])\r",
											"      pm.expect(respObj[i].simplified).to.be.not.null\r",
											"      pm.expect(respObj[i].simplified).to.be.oneOf([true, false])\r",
											"      pm.expect(respObj[i].isPrivate).to.be.not.null\r",
											"      pm.expect(respObj[i].isPrivate).to.be.oneOf([true, false])\r",
											"\r",
											"\r",
											"      console.log(respObj[i].self)\r",
											"      console.log(respObj[i].id)\r",
											"      console.log(respObj[i].key)\r",
											"      console.log(respObj[i].name)\r",
											"      console.log(respObj[i].avatarUrls)\r",
											"     // console.log(respObj[i].avatarUrls.48x48)\r",
											"        console.log(respObj[i].projectTypeKey)\r",
											"        console.log(respObj[i].simplified)\r",
											"        console.log(respObj[i].style)\r",
											"        console.log(respObj[i].isPrivate)\r",
											"        console.log(respObj[i].properties)\r",
											"       \r",
											"    }\r",
											"  }\r",
											"  else{\r",
											"      console.log(\"Array is empty- I do not have any project to be created\")\r",
											"  }\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://febbatchjirademo1.atlassian.net/rest/api/2/project",
									"protocol": "https",
									"host": [
										"febbatchjirademo1",
										"atlassian",
										"net"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetProject",
					"item": [
						{
							"name": "Verify validation message when key is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.contains(\"No project could be found with key\")\r",
											"   pm.expect(respJsonObj.errorMessages[0]).to.include(pm.request.url.path[4])\r",
											"\r",
											"\r",
											"console.log(pm.request.url.path[4])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://febbatchjirademo1.atlassian.net/rest/api/2/project/null",
									"protocol": "https",
									"host": [
										"febbatchjirademo1",
										"atlassian",
										"net"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"null"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when key is null Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.contains(\"No project could be found with key\")\r",
											"   pm.expect(respJsonObj.errorMessages[0]).to.include(pm.request.url.path[4])\r",
											"\r",
											"\r",
											"console.log(pm.request.url.path[4])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://febbatchjirademo1.atlassian.net/rest/api/2/project/null",
									"protocol": "https",
									"host": [
										"febbatchjirademo1",
										"atlassian",
										"net"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"null"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when key which is not present",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.contains(\"No project could be found with key\")\r",
											"   pm.expect(respJsonObj.errorMessages[0]).to.include(pm.request.url.path[4])\r",
											"\r",
											"\r",
											"console.log(pm.request.url.path[4])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://febbatchjirademo1.atlassian.net/rest/api/2/project/shrisha",
									"protocol": "https",
									"host": [
										"febbatchjirademo1",
										"atlassian",
										"net"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"shrisha"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when id is not present",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.contains(\"No project could be found with id\")\r",
											"   pm.expect(respJsonObj.errorMessages[0]).to.include(pm.request.url.path[4])\r",
											"\r",
											"\r",
											"console.log(pm.request.url.path[4])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://febbatchjirademo1.atlassian.net/rest/api/2/project/10005",
									"protocol": "https",
									"host": [
										"febbatchjirademo1",
										"atlassian",
										"net"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10005"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when key is 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.contains(\"No project could be found with key\")\r",
											"   pm.expect(respJsonObj.errorMessages[0]).to.include(pm.request.url.path[4])\r",
											"\r",
											"\r",
											"console.log(pm.request.url.path[4])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://febbatchjirademo1.atlassian.net/rest/api/2/project/0",
									"protocol": "https",
									"host": [
										"febbatchjirademo1",
										"atlassian",
										"net"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify response when key is valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    console.log(parseInt(pm.environment.get(\"statusCode200\")));\r",
											"   pm.expect(pm.response.code).to.be.eql(parseInt(pm.environment.get(\"statusCode200\")));\r",
											"});\r",
											"//   console.log(pm.globals.get(\"name\"))\r",
											"\r",
											"   // console.log(pm.globals.get(\"age\"))\r",
											"\r",
											"  //  pm.globals.set(\"middleName1\",\"Abhilash Nair\")\r",
											"\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(pm.environment.get(\"statusLine200\"));\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(pm.environment.get(\"Content-Type_json\"))\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(pm.environment.get(\"serverName\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(pm.environment.get(\"accountid\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"ResponseTime2000ms\")));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											"    pm.expect(respJsonObj.key).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"\r",
											"console.log(pm.globals.get(\"name\"))\r",
											"console.log(pm.globals.get(\"age\"))\r",
											"console.log(pm.globals.get(\"isMarried\"))\r",
											"\r",
											"pm.globals.set(\"middleName\", \"Abhilash\")\r",
											"\r",
											"\r",
											"pm.environment.set(\"name1\", \"malathi\")\r",
											"//pm.environment.set(\"age\", \"35\")\r",
											"\r",
											"console.log(pm.environment.get(\"age\"))\r",
											"\r",
											"\r",
											"//console.log(pm.request.url.path[4])\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/JIR",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"JIR"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CreateProject",
					"item": [
						{
							"name": "Verify validation message when key is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(pm.environment.get(\"Content-Type_json\"))\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(pm.environment.get(\"serverName\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(pm.environment.get(\"accountid\"))\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": null,\r\n    \"name\": \"EX12345\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when key is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when key starts with lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"m123\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when key starts with uppercase & preceded by lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"Maa123\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when key starts with underscore",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"_Maa123\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when key has special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI123&\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when key has space",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI 123\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when key length has exceded 10 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"The project key must not exceed 10 characters in length.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI1234548454845484544545454545445484\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when name is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectName\")\r",
											"    pm.expect(respJsonObj.errors.projectName).to.be.eql(\"You must specify a valid project name.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI123\",\r\n    \"name\": null,\r\n    \"projectTypeKey\": \"business\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when name is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectName\")\r",
											"    pm.expect(respJsonObj.errors.projectName).to.be.eql(\"You must specify a valid project name.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI123\",\r\n    \"name\": \"\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify validation message when name is more than 80 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectName\")\r",
											"    pm.expect(respJsonObj.errors.projectName).to.be.eql(\"The project name must not exceed 80 characters in length.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI123\",\r\n    \"name\": \"dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd \",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "When project key is null Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Created\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"     var reqJsonObj=JSON.parse(pm.request.body);\r",
											"    console.log(reqJsonObj)\r",
											"   pm.expect(respJsonObj.self).to.contains(\"https://febbatchjirademo1.atlassian.net/rest/api/2/project\");\r",
											"   pm.expect(respJsonObj.self).to.contains(respJsonObj.id)\r",
											"   pm.expect(respJsonObj.id).to.be.greaterThan(0)\r",
											"   pm.expect(respJsonObj.key).to.be.eql(reqJsonObj.key)\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI014\",\r\n    \"name\": \"MALATHI014\",\r\n    \"projectTypeKey\": null,\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when project key is empty, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectType\")\r",
											"    pm.expect(respJsonObj.errors.projectType).to.be.eql(\"An invalid project type was specified. Make sure the project type is available in your Jira instance. Please talk to your Jira administrator if you need more help.\")\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.be.eql(\"An invalid project template was specified. Make sure the project template matches the project type you specified.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI456\",\r\n    \"name\": \"dghdgshd \",\r\n    \"projectTypeKey\": \"\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when project key is invalid, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectType\")\r",
											"    pm.expect(respJsonObj.errors.projectType).to.be.eql(\"An invalid project type was specified. Make sure the project type is available in your Jira instance. Please talk to your Jira administrator if you need more help.\")\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.be.eql(\"An invalid project template was specified. Make sure the project template matches the project type you specified.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI456\",\r\n    \"name\": \"dghdgshd \",\r\n    \"projectTypeKey\": \"Malathi\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when projectTemplateKey is empty, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.be.eql(\"Internal server error\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI456\",\r\n    \"name\": \"dghdgshd \",\r\n    \"projectTypeKey\": \"Malathi\",\r\n    \"projectTemplateKey\": \"\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when projectTemplateKey is invalid, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.be.eql(\"Internal server error\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI456\",\r\n    \"name\": \"dghdgshd \",\r\n    \"projectTypeKey\": \"Malathi\",\r\n    \"projectTemplateKey\": \"text\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when account id is null, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectLead\")\r",
											"    pm.expect(respJsonObj.errors.projectLead).to.be.eql(\"You must specify a valid project lead.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI008\",\r\n    \"name\": \"MALATHI008\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": null,\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when account id is empty, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectLead\")\r",
											"    pm.expect(respJsonObj.errors.projectLead).to.be.eql(\"You must specify a valid project lead.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI008\",\r\n    \"name\": \"MALATHI008\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when account id is invalid, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectLead\")\r",
											"    pm.expect(respJsonObj.errors.projectLead).to.be.eql(\"You must specify a valid project lead.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI009\",\r\n    \"name\": \"MALATHI009 \",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"ddd-rrr-d--dd-d\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when url is empty, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Created\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"        var respJsonObj = pm.response.json(); // Response Json Object\r",
											"  //  var reqJsonObj = pm.request.body.toJSON();\r",
											"   var reqJsonObj=JSON.parse(pm.request.body); // Request Json Object - Convert Raw into Json  \r",
											"    console.log(reqJsonObj)\r",
											"   pm.expect(respJsonObj.self).to.contains(\"https://febbatchjirademo1.atlassian.net/rest/api/2/project\")\r",
											"   pm.expect(respJsonObj.self).to.contains(respJsonObj.id)\r",
											"   pm.expect(respJsonObj.id).to.be.greaterThan(0) // id should be greater than 0\r",
											"   pm.expect(respJsonObj.key).to.be.eql(reqJsonObj.key)\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI020\",\r\n    \"name\": \"MALATHI020\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when assigneeType is null, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Created\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectName\")\r",
											"    pm.expect(respJsonObj.errors.projectName).to.be.eql(\"The project name must not exceed 80 characters in length.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI011\",\r\n    \"name\": \"MALATHI011\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when assigneeType is empty, Verify validation message Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.be.eql(\"Invalid request payload. Refer to the REST API documentation and try again.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI010\",\r\n    \"name\": \"MALATHI010\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when assigneeType is invalid, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.be.eql(\"Invalid request payload. Refer to the REST API documentation and try again.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI011\",\r\n    \"name\": \"MALATHI011\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"malathi\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify ID & self in the response body when request payload is valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Created\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"  //  var reqJsonObj = pm.request.body.toJSON();\r",
											"   var reqJsonObj=JSON.parse(pm.request.body);\r",
											"    console.log(reqJsonObj)\r",
											"\r",
											" \r",
											"   pm.expect(respJsonObj.self).to.contains(\"https://febbatchjirademo1.atlassian.net/rest/api/2/project\")\r",
											"   pm.expect(respJsonObj.self).to.contains(respJsonObj.id)\r",
											"   pm.expect(respJsonObj.id).to.be.greaterThan(0)\r",
											"   pm.expect(respJsonObj.key).to.be.eql(reqJsonObj.key)\r",
											"\r",
											"    \r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI013\",\r\n    \"name\": \"MALATHI013\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "when key & name already exists, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"   pm.expect(respJsonObj.errors.projectName).to.be.eql(\"A project with that name already exists.\")\r",
											"pm.expect(respJsonObj.errors.projectKey).to.be.contains(\"uses this project key.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI132\",\r\n    \"name\": \"MALATHI132\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Function for key & name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"   pm.expect(respJsonObj.errors.projectName).to.be.eql(\"A project with that name already exists.\")\r",
											"pm.expect(respJsonObj.errors.projectKey).to.be.contains(\"uses this project key.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"M{{$randomInt}}\",\r\n    \"name\": \"MALATHI {{$randomNameSuffix}}\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "https://febbatchjirademo1.atlassian.net/rest/api/2/project/10025",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://febbatchjirademo1.atlassian.net/rest/api/2/project/10025",
									"protocol": "https",
									"host": [
										"febbatchjirademo1",
										"atlassian",
										"net"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10025"
									]
								}
							},
							"response": []
						},
						{
							"name": "New ID create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Created\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    var reqJsonObj = JSON.parse(pm.request.body);\r",
											"   console.log(reqJsonObj)\r",
											"  pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(\"https://febbatchjirademo1.atlassian.net/rest/api/2/project/\")\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.id).to.be.greaterThan(0)\r",
											"    pm.expect(respJsonObj.key).to.be.eql(reqJsonObj.key)\r",
											"    pm.environment.set(\"PROJECTid\", respJsonObj.id)\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"M{{$randomInt}}\",\r\n    \"name\": \"MALATHI {{$randomNameSuffix}}\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "UpdateProject",
					"item": [
						{
							"name": "when key is null, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(pm.environment.get(\"Content-Type_json\"))\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(pm.environment.get(\"serverName\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(pm.environment.get(\"accountid\"))\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											" \r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"       pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": null,\r\n    \"name\": \"EX12345\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						},
						{
							"name": "when key is empty, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"\",\r\n    \"name\": \"Example\",\r\n   \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						},
						{
							"name": "when key starts with lowercase,Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"m123\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when key starts with uppercase & preceded by lowercase,Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"Maa123\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when key starts with underscore,Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"_Maa123\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when key has special characters, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI123&\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\",\r\n   \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when key has space, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI 123\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\", \r\n\"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when key length has exceded 10 characters, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.eql(\"The project key must not exceed 10 characters in length.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI1234548454845484544545454545445484\",\r\n    \"name\": \"Example\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when name is null, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											"   pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"       pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"    \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI124\",\r\n    \"name\": null,\r\n    \"projectTypeKey\": \"business\",\r\n     \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when name is empty, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectName\")\r",
											"    pm.expect(respJsonObj.errors.projectName).to.be.eql(\"You must specify a valid project name.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI031\",\r\n    \"name\": \"\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when name is more than 80 characters, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectName\")\r",
											"    pm.expect(respJsonObj.errors.projectName).to.be.eql(\"The project name must not exceed 80 characters in length.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"JIR\",\r\n    \"name\": \"dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd dghdgshd fhjfhdjfhdj fdfdfdfd \",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when project key is empty, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											" \r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"       pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI030\",\r\n    \"name\": \"kanban1\",\r\n    \"projectTypeKey\": \"\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "When project key is null Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"ResponseTime2000ms\")));\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											" \r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"       pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"  // OR\r",
											"      pm.expect(respJsonObj.projectTypeKey).to.be.eql(\"software\")\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI030\",\r\n    \"name\": \"kanban1\",\r\n    \"projectTypeKey\": null,\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when project key is invalid, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											" \r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"       pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"key\": \"KAN\",\r\n        \"name\": \"kanban\",\r\n    \"projectTypeKey\": \"Malathi\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						},
						{
							"name": "when projectTemplateKey is empty, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											" \r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"       pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n       \"key\": \"KAN\",\r\n        \"name\": \"kanban\",\r\n    \"projectTypeKey\": \"Malathi\",\r\n    \"projectTemplateKey\": \"\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						},
						{
							"name": "when projectTemplateKey is invalid, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											" \r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"       pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"KAN\",\r\n    \"name\": \"kanban\",\r\n    \"projectTypeKey\": \"Malathi\",\r\n    \"projectTemplateKey\": \"text\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						},
						{
							"name": "when account id is null, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											"    pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"KAN\",\r\n    \"name\": \"kanban\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": null,\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						},
						{
							"name": "when account id is empty, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"ResponseTime2000ms\")));\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											"    pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"key\": \"MALATHI039\",\r\n    \"name\": \"kanban5\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when account id is invalid, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"ResponseTime2000ms\")));\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											"    pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI009\",\r\n    \"name\": \"MALATHI009 \",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"ddd-rrr-d--dd-d\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "when assigneeType is empty, Verify validation message Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.be.eql(\"Invalid request payload. Refer to the REST API documentation and try again.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"KAN\",\r\n    \"name\": \"kanban1\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						},
						{
							"name": "when assigneeType is null, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"ResponseTime2000ms\")));\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											"    pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"KAN\",\r\n    \"name\": \"kanban1\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						},
						{
							"name": "when assigneeType is invalid, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.be.eql(\"Invalid request payload. Refer to the REST API documentation and try again.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"MALATHI011\",\r\n    \"name\": \"MALATHI011\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"malathi\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Name Change in the response body when request payload is valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    console.log(parseInt(pm.environment.get(\"statusCode200\")));\r",
											"   pm.expect(pm.response.code).to.be.eql(parseInt(pm.environment.get(\"statusCode200\")));\r",
											"});\r",
											"//   console.log(pm.globals.get(\"name\"))\r",
											"\r",
											"   // console.log(pm.globals.get(\"age\"))\r",
											"\r",
											"  //  pm.globals.set(\"middleName1\",\"Abhilash Nair\")\r",
											"\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(pm.environment.get(\"statusLine200\"));\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(pm.environment.get(\"Content-Type_json\"))\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(pm.environment.get(\"serverName\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(pm.environment.get(\"accountid\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"ResponseTime2000ms\")));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											"    pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"  // pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"KAN\",\r\n    \"name\": \"kanban\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify key or ID is Change in the response body when request payload is valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.contains(\"uses this project key.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"HASRH131\",\r\n    \"name\": \"kanban\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10000",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify key  is Change in the response body when request payload is valid Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errors\")\r",
											"    pm.expect(respJsonObj.errors).to.haveOwnProperty(\"projectKey\")\r",
											"    pm.expect(respJsonObj.errors.projectKey).to.be.contains(\"uses this project key.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"key\": \"MALATHI015\",\r\n        \"name\": \"kanban\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Example Project description\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						},
						{
							"name": "when key & name already exists, Verify validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(\"AtlassianEdge\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(\"63f979464c355259db9e3c80\")\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json()\r",
											"    var reqJsonObj = JSON.parse(responseBody)\r",
											"    pm.expect(respJsonObj.expand).not.null\r",
											"    pm.expect(respJsonObj.expand).not.empty\r",
											"    pm.expect(respJsonObj.expand).to.be.eql(pm.environment.get(\"expandText\"))\r",
											"    pm.expect(respJsonObj.self).not.null\r",
											"    pm.expect(respJsonObj.self).not.empty\r",
											"    pm.expect(respJsonObj.self).to.be.contains(pm.environment.get(\"selfText\"))\r",
											"    pm.expect(respJsonObj.self).to.be.contains(respJsonObj.id)\r",
											"    pm.expect(respJsonObj.key).not.null\r",
											"    pm.expect(respJsonObj.key).not.empty\r",
											" \r",
											"    pm.expect(respJsonObj.description).not.null\r",
											"    pm.expect(respJsonObj.description).not.empty\r",
											"    pm.expect(respJsonObj.description).to.be.eql(reqJsonObj.description)\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(pm.environment.get(\"lead_self_text\"))\r",
											"       pm.expect(respJsonObj.id).to.be.eql(pm.request.url.path[4])\r",
											"    pm.expect(respJsonObj.lead.self).to.be.contains(respJsonObj.lead.accountId)\r",
											"    pm.expect(respJsonObj.lead.displayName).to.be.eql(pm.environment.get(\"lead_displayName\"))\r",
											"    pm.expect(respJsonObj.lead.active).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.projectTypeKey).to.be.oneOf([\"business\", \"software\"])\r",
											"    pm.expect(respJsonObj.simplified).to.be.oneOf([true, false])\r",
											"    pm.expect(respJsonObj.isPrivate).to.be.oneOf([true, false])\r",
											"  //  pm.expect(respJsonObj.url).to.be.eql(\"https://febbatchjirademo1.atlassian.net\")\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.null\r",
											"  //  pm.expect(respJsonObj.url).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.not.null\r",
											"    pm.expect(respJsonObj.name).to.be.not.empty\r",
											"    pm.expect(respJsonObj.name).to.be.eql(reqJsonObj.name)\r",
											"\r",
											"  \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"key\": \"KAN\",\r\n        \"name\": \"Aug batch Jira project\",\r\n    \"projectTypeKey\": \"business\",\r\n    \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-project-management\",\r\n    \"description\": \"Jira project is updated for aug batch\",\r\n    \"leadAccountId\": \"{{accountid}}\",\r\n    \"url\": \"{{domainName}}\",\r\n    \"assigneeType\": \"PROJECT_LEAD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/10001",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"10001"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "DeleteProject",
					"item": [
						{
							"name": "Validating  message if the id or key is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(pm.environment.get(\"Content-Type_json\"))\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(pm.environment.get(\"serverName\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(pm.environment.get(\"accountid\"))\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.be.eql(\"No project could be found with key 'null'.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/null",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"null"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validating  message if the id or key  is not present",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"text/html;charset=UTF-8\")\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(pm.environment.get(\"serverName\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(pm.environment.get(\"accountid\"))\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"   \r",
											"    pm.expect(responseBody).to.be.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Id the id or key is not present in database, Validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(pm.environment.get(\"Content-Type_json\"))\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(pm.environment.get(\"serverName\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(pm.environment.get(\"accountid\"))\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"    var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.be.eql(\"No project could be found with key 'malathi23232323'.\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/malathi23232323",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"malathi23232323"
									]
								}
							},
							"response": []
						},
						{
							"name": "Response body when id or key is valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(pm.environment.get(\"Content-Type_json\"))\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(pm.environment.get(\"serverName\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(pm.environment.get(\"accountid\"))\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"      pm.expect(responseBody).to.be.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/{{PROJECTid}}",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"{{PROJECTid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validation message when id or key is already deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(pm.environment.get(\"Content-Type_json\"))\r",
											"});\r",
											"pm.test(\"Server is present\", function () {\r",
											"    pm.response.to.have.header(\"Server\");\r",
											"    pm.expect(pm.response.headers.get(\"Server\")).to.be.eql(pm.environment.get(\"serverName\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"X-Aaccountid is present\", function () {\r",
											"    pm.response.to.have.header(\"X-Aaccountid\");\r",
											"    pm.expect(pm.response.headers.get(\"X-Aaccountid\")).to.be.eql(pm.environment.get(\"accountid\"))\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function(){\r",
											"       var respJsonObj = pm.response.json();\r",
											"    pm.expect(respJsonObj).to.haveOwnProperty(\"errorMessages\")\r",
											"    pm.expect(respJsonObj.errorMessages[0]).to.be.contains(\"No project could be found with key\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "shettymalathi113@gmail.com",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domainName}}/rest/api/2/project/{{PROJECTid}}",
									"host": [
										"{{domainName}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"{{PROJECTid}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Priority_API",
			"item": []
		}
	]
}